{
  "name": "grunt-pngmin",
  "description": "Grunt plugin to compress png images with pngquant.",
  "version": "0.6.1",
  "homepage": "https://github.com/zauni/pngmin",
  "author": {
    "name": "Matthias Zaunseder",
    "email": "zaunseder@outlook.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/zauni/pngmin.git"
  },
  "bugs": {
    "url": "https://github.com/zauni/pngmin/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/zauni/pngmin/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test",
    "postinstall": "node postinstall.js"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1",
    "grunt-contrib-copy": "~0.4.0",
    "grunt-release": "~0.4.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "pngquant"
  ],
  "dependencies": {
    "tmp": "0.0.16",
    "filesize": "~1.9.0",
    "which": "~1.0.5",
    "node-pngquant-bin": "~0.1.0"
  },
  "readme": "# grunt-pngmin\r\n\r\n> Grunt plugin to compress png images with pngquant.\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-pngmin --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-pngmin');\r\n```\r\n\r\n### Linux users\r\nYou also have to download pngquant if you are on a Linux system from their website: [pngquant.org](http://pngquant.org).\r\nYou can put the pngquant executable either somewhere in your `PATH` or in a folder in your project.\r\nIf you put it in a folder outside of the `PATH`, you have to specify the path to it with the `binary` option (see below).\r\n\r\nWindows and Mac OSX is supported out of the box.\r\n\r\n## The \"pngmin\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `pngmin` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  pngmin: {\r\n    options: {\r\n      // Task-specific options go here.\r\n    },\r\n    your_target: {\r\n      // Target-specific file lists and/or options go here.\r\n    },\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.binary\r\nType: `String`\r\nDefault value: `'pngquant'` in your `PATH` or `'bin/pngquant'`\r\n\r\nImportant for Linux users!\r\nThe pngquant executable which will be spawned. If the pngquant binary is not found in `PATH` the default fallback is `'bin/pngquant'`, but this option has always precedence.\r\n\r\n#### options.concurrency\r\nType: `Number`\r\nDefault value: `4`\r\n\r\nHow many executables will be spawned in parallel.\r\n\r\n#### options.colors\r\nType: `Number`\r\nDefault value: `256`\r\n\r\nHow many colors should be in the image after quantizing.\r\n\r\n#### options.ext\r\nType: `String`\r\nDefault value: `'-fs8.png'`\r\n\r\nThe file extension after the quantization.\r\n\r\n#### options.quality\r\nType: `String`, `Object` or `Array`\r\nDefault value: `null`\r\n\r\nInstructs pngquant to use the least amount of colors required to meet or exceed the max quality.\r\nIf conversion results in quality below the min quality the image won't be saved.\r\nSpecify quality like that:\r\n* String: `'min-max'`\r\n* Object: `{min: min, max: max}`\r\n* Array: `[min, max]`\r\n\r\nmin and max are numbers in range 0 (worst) to 100 (perfect), similar to JPEG.\r\nFor example as object: `{min: 60, max: 80}`.\r\n\r\n#### options.force\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nShould existing files be overwritten by the optimized version? Be careful with this option if you need the original files!\r\n\r\n#### options.speed\r\nType: `Number`\r\nDefault value: `3`\r\n\r\nSpeed/quality trade-off from 1 (brute-force) to 10 (fastest). Speed 10 has 5% lower quality, but is 8 times faster than the default.\r\n\r\n#### options.iebug\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWorkaround for IE6, which only displays fully opaque pixels. pngquant will make almost-opaque pixels fully opaque and will avoid creating new transparent colors.\r\n\r\n#### options.transbug\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nTransparent color will be placed at the end of the palette.\r\n\r\n### Usage Examples\r\n\r\n#### Default Options\r\nIn this example `image.png` will be optimized, copied to `dest` folder and renamed to `image-fs8.png`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  pngmin: {\r\n    compile: {\r\n      options: {},\r\n      files: [\r\n        {\r\n          src: 'path/to/image.png',\r\n          dest: 'dest/'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Custom Options\r\nIn this example `image.png` will be optimized and copied to `dest` folder.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  pngmin: {\r\n    compile: {\r\n      options: {\r\n        ext: '.png'\r\n      },\r\n      files: [\r\n        {\r\n          src: 'path/to/image.png',\r\n          dest: 'dest/'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nIn this example `image.png` gets overwritten by the optimized version, so use force option carefully!\r\n\r\n```js\r\ngrunt.initConfig({\r\n  pngmin: {\r\n    compile: {\r\n      options: {\r\n        ext: '.png',\r\n        force: true\r\n      },\r\n      files: [\r\n        {\r\n          src: 'path/to/image.png',\r\n          dest: 'path/to/'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Example which is preserving the subfolder structure\r\nIn this example all images in the folder `path/to/images/` and its subfolders will be optimized and copied to `dest` while preserving the directory structure.\r\nSee http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically for more options.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  pngmin: {\r\n    compile: {\r\n      options: {\r\n        ext: '.png'\r\n      },\r\n      files: [\r\n        {\r\n          expand: true, // required option\r\n          src: ['**/*.png'],\r\n          cwd: 'path/to/images/', // required option\r\n          dest: 'dest/'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Complex example\r\nThis is a complex example with a lot of options set:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  pngmin: {\r\n    compile: {\r\n      options: {\r\n        binary: 'path/to/pngquant', // specify pngquant path if on Linux\r\n        concurrency: 8,             // specify how many exucutables get spawned in parallel\r\n        colors: 128,                // reduce colors to 128\r\n        ext: '.png',                // use .png as extension for the optimized files\r\n        quality: '65-80',           // output quality should be between 65 and 80 like jpeg quality\r\n        speed: 10,                  // pngquant should be as fast as possible\r\n        iebug: true                 // optimize image for use in Internet Explorer 6\r\n      },\r\n      files: [\r\n        {\r\n          src: 'path/to/images/*.png',\r\n          dest: 'dest/'\r\n        },\r\n        {\r\n          src: 'path/to/other/images/*.png',\r\n          dest: 'another/dest/'\r\n        }\r\n      ]\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n- 0.6.1: Added postinstall script to change permission on the OS X pngquant binary\r\n- 0.6.0: pngquant binary is now included for windows and mac users (no additional pngquant installation need)\r\n- 0.5.1: Fixed potential issue with quality option\r\n- 0.5.0: Quality option of pngquant revealed to the plugin user\r\n- 0.4.5: Shows overall saved bytes\r\n- 0.4.4: Uses pngquant if it's in the `PATH`, otherwise uses fallback, but options.binary has always precedence\r\n- 0.4.3: Fixed issue with total percent\r\n- 0.4.2: Filesize of old and optimized image is shown\r\n- 0.4.1: Gives a hint if no images were found\r\n- 0.4.0: Destination doesn't have to be a directory anymore\r\n- 0.3.4: If the `force` option is false and the file already exists at the destination pngquant doesn't get spawned\r\n- 0.3.3: The total savings are displayed\r\n- 0.3.2: The force option is no longer required if '.png' is set as ext option\r\n- 0.3.1: If the optimization increases file size, the original file is copied to the destination\r\n- 0.3.0: Corrected behaviour if files object is built dynamically (http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically)\r\n- 0.2.1: Just one queue is created\r\n- 0.2.0: The pngquant executable gets queued to avoid a problem with too many spawned executables\r\n- 0.1.0: Initial release\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-pngmin@0.6.1",
  "_from": "grunt-pngmin@^0.6.1"
}
